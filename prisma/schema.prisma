generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PaybuttonAddress {
  id          Int       @id @default(autoincrement())
  address     String    @unique @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chainId     Int
  chain       Chain     @relation(fields: [chainId], references: [id], onUpdate: Restrict)
  paybuttons  PaybuttonAddressOnPaybutton[]
  receivedTransactions Transaction[]

  @@index([chainId], map: "PaybuttonAddress_chainId_fkey")
}

model Paybutton {
  id             Int                  @id @default(autoincrement())
  name           String               @db.VarChar(255)
  uuid           String               @default(dbgenerated("(uuid())"))
  buttonData     String               @db.LongText
  providerUserId String?              @db.VarChar(255)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  addresses      PaybuttonAddressOnPaybutton[]

  @@unique([name, providerUserId], map: "Paybutton_name_providerUserId_unique_constraint")
}

model PaybuttonAddressOnPaybutton {
  paybutton       Paybutton     @relation(fields: [paybuttonId], references: [id])
    paybuttonId     Int
    paybuttonAddress   PaybuttonAddress @relation(fields: [paybuttonAddressId], references: [id])
    paybuttonAddressId Int
    createdAt DateTime @default(now())
    updatedAt      DateTime             @updatedAt

    @@id([paybuttonId, paybuttonAddressId])
}

model Chain {
  id                 Int                @id @default(autoincrement())
  slug               String             @unique @db.VarChar(255)
  title              String             @db.VarChar(255)
  ticker             String             @db.VarChar(255)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  paybuttonAddresses PaybuttonAddress[]
}

model Transaction {
  id                 Int                @id @default(autoincrement())
  hash               String             @unique @db.VarChar(255)
  amount             Decimal            @db.Decimal(24,8)
  timestamp          Int
  paybuttonAddressId Int
  paybuttonAddress   PaybuttonAddress   @relation(fields: [paybuttonAddressId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}
